ssh -X root@192.168.4.50
ssh -X root@192.168.4.51
ssh -X root@192.168.4.52               gcc 不能后装,要先装起来,要是装错了,需要先删除解压编译过的文件,然后重新再来,比如我们解压出来的
ssh -X root@192.168.4.53               redis-4.0.8/
ssh -X root@192.168.4.54
ssh -X root@192.168.4.55
ssh -X root@192.168.4.56
ssh -X root@192.168.4.57
ssh -X root@192.168.4.58
ssh -X root@192.168.4.59
ssh -X root@192.168.4.60
ssh -X root@192.168.4.71
ssh -X root@192.168.4.72
ssh -X root@192.168.4.73


panglj@tedu.cn


步骤:1.scp /linux-soft/03/mysql/mysql-5.7.17.tar root@192.168.4.51:/root
2.tar -xf mysql-5.7.17.tar
3.yum -y install mysql-community-*.rpm

mysql> change   master  to
    -> master_host="192.168.4.57",
    -> master_user="repluser",
    -> master_password="123qqq...A",
    -> master_log_file="db57-db57.000001",
    -> master_log_pos=997;

grant  replication  slave   on  *.*  to  yaya@"%"   identified    by  "123qqq...A";


grant  replication slave on *.*  to repluser@"%" identified  by "123qqq...A";


mysqldump  -uroot  -p密码   --master-dmaxscalerouterata   db5   > /allbak.sql 

scp  /allbak.sql    root@192.168.4.56:/root/

mysql  -uroot -p密码  db5  <  /root/allbak.sql 

user=maxscalemon
user=maxscalerouter

grant replication slave ,replication client on *.* to maxscalemon@'%' identified by '123qqq...A';

grant select on mysql.* to maxscalerouter@'%' identified by '123qqq...A';

grant select,insert on gamedb.*  to yaya888@"%" identified  by "123qqq...A";

drop user maxscalerouter@'%'list servers
;

netstat -utnlp | grep maxscale

maxadmin -uadmin -pmariadb -P4016

show grants for maxscalerouter@'%';

select host , user from mysql.user where user like "maxscale%";

起服务:maxscale -f /etc/maxscale.cnf

mysql -h192.168.4.57 -p4006 -uyaya888@"%" -p123qqq...A

查看错误日志:cat /var/log/maxscale/maxscale.log


PATH=/usr/local/mysql/bin:$PATH


多实例:

启动服务:mysqld_multi  start 1

mysql -uroot -p'qeT;fI6&k<hH' -S /dir1/mysqld1.sock

修改密码: alter user root@localhost identified by "123456";

netstat -utnlp | grep :3308

mysql -uroot -p123456 -S /dir2/mysqld2.sock


[数据库密码:Asuka1314..]


mysql>set password=password("");[改密码]  eg:set password for yaya108@"%"=password("654321");

停止服务:mysqld_multi --user=root --password=密码 stop 实例编号
 mysqld_multi --user=root --password=123456 stop 1


[还原没有主从服务的数据库:rm -rf master.info 
                     rm -rf relay-log.info
                     rm -rf host56-relay-bin.*]
sed -i  '45,47d' schema.xmlplugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
sed -i  '43d' schema.xml

授权: grant all on  *.* to plj@"%" identified by "123qqq...A" ;  
     mysql -uroot -pAsuka1314.. -e 'grant all on  *.* to plj@"%" identified by "123qqq...A"' 
grep password  /var/log/mysqld.log
查看权限:show grants for plj@"%";

查看mycat状态:/usr/local/mycat/bin/mycat status
启动mycat:/usr/local/mycat/bin/mycat start

连接:mysql -h192.168.4.56 -P8066 -uroot -p123456

查看装包:rpm -qa | grep jdk 

查看错误日志:tail -f /usr/local/mycat/logs/wrapper.log  [erro]



建表:mysql> create table employee(
    -> Id int primary key auto_increment,
    -> sharding_id int,
    -> name char(10),
    -> sex enum("m","w"));

mysql> insert into employee(sharding_id,name,sex) values(
    -> (10000,"bob2","m"),
    -> (10000,"tom2","m"),
    -> (10000,"lucy2","w"));

mysql> create table company(
    -> ID int primary key auto_increment,
    -> gname char(10),money int, peploe char(10),
    -> gaddr char(50)grep password  /var/log/mysqld.log
    -> );

一主多从结构:mysql> change   master  to
    ->  master_host="192.168.4.51",
    -> master_user="repluser",
    -> master_password="123qqq...A",
    -> master_log_file="master51.000002",
    -> master_log_pos=441;

主从半同步配置:plugin-load="rpl_semi_sync_master=semisync_master.so;rpl_semi_sync_slave=semisync_slave.so"
rpl_semi_sync_master_enabled=1 
rpl_semi_sync_slave_enabled=1 
relay_log_purge=0


在shell上运用数据库的指令:mysql -uroot -pAsuka1314.. -e 'show master status'

测试集群环境:
masterha_check_ssh --conf=/etc/mha/app1.cnf

测试主从同步:
masterha_check_repl --conf=/etc/mha/app1.cnf

57上的mha的主配置文件: vim /etc/mha/app1.cnf 

刷新日志:flush logs;
######################################################################################################################

NOSQL:

REDIS常用命令,一定要小心删除指令
- set key名 key值      //存储1个key值
  mset key名列表       //存储多个key值  
  get key名            //获取key值
  mget              //获取多个key值
  select 数据库编号0-15  //切换库
  keys *              //显示所有key名
  keys a?             //显示指定key名
  exists key名          //测试key名是否存在
  ttl key名              //查看key生存时间
  type key名             //查看key类型
  move key名 库编号      //移动key到指定库
  expire key名 数字     //设置key有效时间
  del key名              //删除指定的key
  flushall           //删除内存里所有key
  flushdb            //删除所在库的所有key
  save               //保存所有key到硬盘
  shutdown           //停止服务
 

启动redis服务:/etc/init.d/redis_6379  start
停止redis服务:/etc/init.d/redis_6379  stop
修改配置文件: vim +501 /etc/redis/6379.conf
另一个配置文件: vim +43  /etc/init.d/redis_6379 (打开服务和停下服务有关的配置) 
修改配置文件后进入redis:redis-cli -h 192.168.4.50 -p 6350 -a123456
停止修改后的redis服务:1.redis-cli -h 192.168.4.50 -p 6350 -a 123456 shutdown
                        2.(修改脚本) vim +43 /etc/init.d/redis_6379
                   $CLIEXEC -h 192.168.4.50 -p 6350 -a 123456 shutdown  

scp -r lnmp/ root@192.168.4.60:/root


启动nginx服务:/usr/local/nginx/sbin/nginx

网页文件目录:vim /usr/local/nginx/html/01.php
测试修改: /usr/local/nginx/sbin/nginx  -t     
查看支持的服务:php -m | grep -i redis

安装模块:./configure --with-php-config=/usr/bin/php-config
打开配置文件修改:vim /etc/php.ini  进去之后,进入命令行,输入 ":728"  跳转行数 
728  extension_dir = "/usr/lib64/php/modules/"
730  extension = "redis.so"

路径:ls /usr/lib64/php/modules/    redis.so

php简单脚本:
<?php
$redis = new redis();
$redis->connect("192.168.4.50","6350");
$redis->auth("123456");
$redis->set("username","asuka");
echo "ok";
?>


<?php
$x = new redis() ;
$x->connect("192.168.4.50","6350");
$x->auth("123456");
echo $x->get("username");
?>


<?php
$redis = new redis();
$redis->connect("192.168.4.50","6350");
$redis->auth("123456");
$redis->set("class","nsd1907");
echo $redis->get("class");
?>


正则删除:sed -i '66,72s/#//g' /usr/local/nginx/conf/nginx.conf


他主机登录redis服务,在没有密码的情况:redis-cli -h 192.168.4.51 -p 6351


查询集群信息: cluster  info


删除一个主机后,重新分配hash槽: redis-trib.rb rebalance 192.168.4.51:6351


将分出去的主机重新加入集群,有两个方法: 1.删除nodes-6379.conf数据
                               [root@host59 ~]# ls /var/lib/redis/6379/
                               dump.rdb  nodes-6379.conf
                                          2.进redis数据库执行cluster reset,然后在调度主机重新添加进集群,是从的话.就要加--slave
                                [root@host59 redis-4.0.8]# redis-cli -h 192.168.4.59 -p 6359
                                192.168.4.59:6359> cluster reset

                                [root@mgm57 ~]# redis-trib.rb  add-node  192.168.4.58:6358  192.168.4.53:6353
                                          or
                                [root@mgm57 ~]# redis-trib.rb add-node  --slave 192.168.4.59:6359  192.168.4.51:6351

                
还原指令执行脚本: /etc/init.d/redis_6379  stop  
        rm -rf /var/lib/redis/6379/*    
        sed -i '815s/cluster/#cluster/g' /etc/redis/6379.conf
        sed -i '823s/cluster/#cluster/g' /etc/redis/6379.conf
        sed -i '829s/cluster/#cluster/g' /etc/redis/6379.conf
        /etc/init.d/redis_6379 start

 
临时修改主从配置: slaveof  192.168.4.51  6351
主从配置文件(永久): vim +282 /etc/redis/6379.conf 
           slaveof 192.168.4.51 6351

在命令行里修改配置文件: config get 配置项     config set 配置项 值        config rewrite

查看信息:info replication

哨兵服务: vim /etc/sentinel.conf
          bind 0.0.0.0     //使用本机所有地址
          port 26379
          sentinel monitor server51 192.168.4.51 6351 1 
          sentinel auth-pass server51 123456     //没有连接密码.可省略这一步


 
(手动备份)将50的dump.rdb拷贝到55: scp root@192.168.4.50:/root/dump.rbd /var/lib/redis/6379/



string 字符串:

set key value [ex seconds] [px milliseconds] [nx|xx]
 --------设置key及值,过期时间可以使用秒或毫秒为

setrange key offset value
 ---------从偏移量开始复写key的特定位的值

eg: >set first "hello world"
     >setrange first 6 "redis"

strlen key,统计字串长度
 >strlen first

append key value
--------存在则增加,不存在则创建key及value,返回key长度
 >append myname jacob

setbit key offset value
 ---对key所存储字串,设置或清除特定偏移量上的位(bit)
 ---value值可以为1或0,offset为0~2^32之间
 --key不存在,则创建新key
> setbit bit 0 1
> setbit bit 1 0


bitcount key
---统计字串中被设置为1的比特位数量
>setbit bits 0 1
>set bits 3 1
>bitcount bits

decr key 
--将key中的值减1,key不存在则先初始化为0,再减一
> set test 10
>decr test

decrby key decrement
--将key中的值,减去decrement
>set count 100
>decrby count 20

get key
--返回key存储的字符串值,若key不存在则返回null
---若key的值不是字串,则返回错误,get只能处理字串

getrange key start end
--返回字串值中的子字串,截取范围为start和end
--负数偏移量标示从末尾开始计数,-1表示最后一个字符,-2表示倒数第二个字符
>set first "hello the world"
>getrange first -5 -1
>getrange first 0 4


incr key
--将key的值加1,如果key不存在,则初始为0后再加1
--主要应用为计数器
>set page 20
>incr page

incrby key increment
--将key的值增加increment

incrbyfloat key increment
--为key中所储存的值加上浮点数增量 increment
>set num 16.1
>incrbyfloat num 1.1

mget key [key]
--获取一个或多个key的值,空格分隔,具有原子性

mset key value [key value...]
--设置多个key及值,空格分隔,具有原子性

lpush key value [value]
--将一个或多个值value插入到列表key的表头
--key不存在,则创建key
> lpush list a b c   //list值依次为c b a 
 
lrange key start stop
--从开始位置读取key的值到stop结束
>lrange list 0 2      //从0位开始,读到2位为止
>lrange list 0 -1     //从开始读到结束为止
>lrange list 0 -2    //从开始读到倒数第二位为止

lpop key
--移除并返回列表头元素数据,key不存在则返回nil
>lpop list  //删除表头元素,可以多次执行

llen key
--返回列表key的长度

lindex key index
--返回列表中第index个值
>lindex key 0; lindex key 2; lindex key -2

lset key index value
--将key中index位置的值修改为value
>lset list 3 test    //将list中第3个值修改为test


rpush key value [value]
--将value插入到key的末尾
>rpush list a b c   //list3值为 a b c
>rpush list3 d     //末尾插入d

rpop key
--删除并返回key末尾的值
>rpush list a b c  //list4值为a b c 
>rpop list4       //删除末尾的c,并返回删除的值


hset key field value
--将hash表中field值设置为value
>hset site google 'www.g.cn'
>hset site baidu 'www.baidu.com'

hget key filed
--获取hash表中fieled的值
>hget site google

hmset key field value [field value]
--同时给hash表中的多个field赋值
>hmset site google www.g.cn baidu www.baidu.com

hmget key field [field]
--返回hash表中多个field的值
>hmget site google baidu

hkeys key
--返回hash表中所有field名称
>hmset site google www.g.cn baidu www.baidu.com
>hkeys site

hgetall key
--返回hash表中所有的值

hvals key
--返回hash表中所有field的值
>hvals key

hdel key field [field]
--删除hash表中多个field的值,不存在则忽略
>hdel site google baidu

del key [key]
--删除一个或多个key

exists key
--测试一个key是否存在

expire key seconds
--设置key的生存周期

persist key
--设置key永不过期

ttl key
--查看key的生存周期

######################################################################################################################
ssh -X root@192.168.2.5
ssh -X root@192.168.2.100
ssh -X root@192.168.2.200
ssh -X root@192.168.2.201
ssh -X root@192.168.2.202


装包:[root@zabserver zabbix-3.4.4]# ./configure \
>  --enable-server --enable-proxy --enable-agent \
> --with-mysql=/usr/bin/mysql_config \
> --with-net-snmp --with-libcurl


xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
进入文件拷贝zabbix页面:
[root@zabserver ~]# cd zabbix-3.4.4/frontends/php/
[root@zabbixserver php]# cp -r * /usr/local/nginx/html/
[root@zabbixserver php]# chmod -R 777 /usr/local/nginx/html/*

/usr/local/nginx/sbin/nginx -s stop
与案例不同的步骤:vim /usr/local/nginx/conf/nginx.conf
在17行修改: http {
 18      fastcgi_buffers 8 16k;        //缓存php生成的页面内容,8个16k
 19      fastcgi_buffer_size 32k;      //缓存php生产的头部信息
 20      fastcgi_connect_timeout 300;  //连接php的超时时间
 21      fastcgi_send_timeout 300;     //发送请求的超时时间
 22      fastcgi_read_timeout 300;     //读取请求的超时时间

停止nginx服务:/usr/local/nginx/sbin/nginx -s stop
重新启动nginx服务:/usr/local/nginx/sbin/nginx 

修改php配置: vim /etc/php.ini
date.timezone = Asia/Shanghai    //设置时区
max_execution_time = 300         //最大执行时间,秒
post_max_size = 32M              //post数据最大容量
max_input_time = 300             //服务器接受数据的时间限制
[root@zabweb1 ~]# killall -9 zabbix_agentd
[root@zabweb1 ~]# zabbix_agentd
[root@zabweb1 ~]# netstat -untlp | grep :10050
tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      12958/zabbix_agentd 
[root@zabweb1 ~]# zabbix_get -s 127.0.0.1 -k tcp_status[time_wait]
36

然后重启服务: systemctl restart php-fpm
网页目录: 192.168.2.5/index.php
初始化设置保存在了: Configuration file "/usr/local/nginx/html/conf/zabbix.conf.php" created.

登录web页面     192.168.2.5/index.php
 用户:admin
 密码:zabbix

进程的停起:useradd zabbix   zabbix_agentd
进程的启动:zabbix_server   
[root@zabserver php]# netstat -untlp | grep :10051
tcp        0      0 0.0.0.0:10051           0.0.0.0:*               LISTEN      7606/zabbix_server   //服务名

         killall -9 zabbix_server

创建自定义key: vim count.line.passwd  
UserParameter=count.line.passwd,wc -l /etc/passwd | awk '{print $1}
删除用户:userdel -r  bob2

进去修改自定义命令: cd /usr/local/etc/zabbix_agentd.conf.d/
                vim  count.line.passwd.conf
                UserParameter=count.line.passwd,wc -l /etc/passwd | awk '{print $1}'
                UserParameter=nginx_status[*],/usr/local/bin/nginx_status.sh $1
                
                mv /root/nginx_status.sh /usr/local/bin/
               chmod +x /usr/local/bin/nginx_status.sh 
                     killall -9 zabbix_agentd
                            zabbix_agentd
                       netstat -untlp | grep :10050
              zabbix_get -s localhost -k nginx_status[waiting]
                    


测试脚本:
#!/bin/bash
case $1 in
estab)
  ss -antp | awk 'BEGIN{x=0}/^ESTAB/{x++} END{print x}';;
close_wait)
  ss -antp | awk 'BEGIN{x=0}/^CLOSE-WAIT/{x++} END{print x}';;
time_wait)
  ss -antp | awk 'BEGIN{x=0}/^TIME-WAIT/{x++} END{print x}';;
esac

脚本定义成命令要到/usr/local/etc/zabbix_agentd.conf.d/目录下,修改count.line.passwd.conf文件
 vim  /usr/local/etc/zabbix_agentd.conf.d/count.line.passwd.conf
  UserParameter=count.line.passwd,wc -l /etc/passwd | awk '{print $1}' 
  UserParameter=nginx_status[*],/usr/local/bin/nginx_status.sh $1
  UserParameter=tcp_status[*],/usr/local/bin/net_statu.sh $1

然后杀死进程,重启服务,验证脚本
  [root@zabweb1 ~]# killall -9 zabbix_agentd
[root@zabweb1 ~]# zabbix_agentd
[root@zabweb1 ~]# netstat -untlp | grep :10050
tcp        0      0 0.0.0.0:10050           0.0.0.0:*               LISTEN      12958/zabbix_agentd 
[root@zabweb1 ~]# zabbix_get -s 127.0.0.1 -k tcp_status[time_wait]
36

在ZABBIX网页里: 配置-模板-选择模板-选择监控项-添加监控项

####################################################################################################################################3

RHEL6 不能使用systemctl 管理服务
使用 chkconfig
     chkconfig
 httpd on = systemctl enable httpd
 

DNS域名服务器:cat /etc/resolve.conf 

su 的时候.有没有- 是有区别的
加了 - 会切换到对应的家目录

配置sudo 提权,要记得将配置文件/etc/sudoers 里的wheel组给注释掉.



数据库bin-log日志在: /var/lib/mysql/      注释:/var/lib ：存放系统正常运行时要改变的文件 

(一些目录的作用:inux中/etc是配置文件的目录，/var是储存各种变化的文件。

2./etc的特点为包含了广泛的系统配置文件，这些配置文件几乎包含了系统配置的方方面面，是一个底层的重要项目，通常添加一些次等重要的零碎事物。

3./var的特点为包含系统运行时要改变的数据。其中包括每个系统是特定的，即不能够与其他计算机共享的目录。

在“etc/bin”中的“etc”真正代表的是“etcetera”(附加物)。在早期的Unix系统中，最为重要的目录是“bin”目录 (“bin”是“binaries”二进制文件――编译后的程序的缩写)，“etc”中则包含琐碎的程序，如启动、关机和管理。换句话说，是一个底层的重要项目，通常添加一些次等重要的零碎事物。

/var有些目录还是可以与其他系统共享，如/var/mail,/var/cache/man,/var/cache/fonts,/var/spool/news。var目录存在的目的是把usr目录在运行过程中需要更改的文件或者临时生成的文件及目录提取出来，由此可以使usr目录挂载为只读的方式。


/var 文件系统 : /var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化或扩充的。原来 /var 目录中有些内容是在 /usr 中的，但为了保持 /usr 目录的相对稳定，就把那些需要经常改变的目录放到 /var 中了。

特点：

1./var/catman :包括了格式化过的帮助 (man) 页。帮助页的源文件一般存在 /usr/man/catman 中，有些 man 页可能有预格式化的版本，存在 /usr/man/cat 中。而其他的 man 页在第一次看时都需要格式化，格式化完的版本存在 /var/man 中，这样其他人再看相同的页时就无须等待格式化了。

2. /var/lib ：存放系统正常运行时要改变的文件。 

3. /var/local ：存放 /usr/local 中安装的程序的可变数据 ( 即系统管理员安装的程序 ) 。注意，如果必要， 即使本地安装的程序也会使用其他 /var 目录，例如 /var/lock 。 

/etc 目录包含各种系统配置文件，下面说明其中的一些。其他的你应该知道它们属于哪个程序，并阅读该程序的 man 页。许多网络配置文件也在 /etc 中。

特点： 

1./etc/rc ：启动、或改变运行级时运行的脚本或脚本的目录。 

2. /etc/passwd：用户数据库，其中的域给出了用户名、真实姓名、用户起始目录、加密口令和用户的其他信息。 

3. /etc/fdprm：软盘参数表，用以说明不同的软盘格式，可用 setfdprm 进行设置。更多的信息见 setfdprm 的帮助页。)


###################################################################################################################################
安全上下文:ls -lZ                              //安全上下文就是标签
         ls -ldZ
         ps aux | grep 进程名
         ps aux -Z | grep 进程名

用户:角色:访问类型:选项......
system_u:object_r:admin_home_t:s0

服务端构建ftp服务:  yum  -y install vsftpd                                 客户端:  [root@room9pc01 ~]# ftp 192.168.2.200
            systemctl start  vsftpd                                       Name (192.168.2.200:root): asuka
               把东西拷贝到家目录(其他用户可访问):                                            331 Please specify the password.
           [root@zabweb1 ~]# ls /var/ftp/                                 ftp> cd /var/ftp/
           pub                                                            ftp> ls
                                                                          150 Here comes the directory listing.
                                                                          -rw-r--r--    1 0        0               0 Nov 01 03:10 
                                                                           1.txt
                                                                           drwxr-xr-x    2 0     0     6 Aug 03  2017 pub
                                                                           226 Directory send OK
一般操作规律:
创建新文件或目录时,会自动继承父目录的安全上下文
复制的文件会自动继承目标位置的上下文
移动的文件,原有的上下文不变

修改安全上下文:
chcon -t    被修改的访问类型
      -R    递归修改
                
恢复安全上下文:
 restorecon
eg: restorecon /var/ftp/*.html  (还原成正确的标签)
 

客户端搭建ftp服务: yum -y install ftp
                ftp 192.168.2.100
                Name (192.168.2.100:root): ftp
                331 Please specify the password.
                Password:
                ftp> cd share
                ftp> get nginx-1.12.2.tar.gz                //用get下载,用put上传

服务端改布尔值: [root@zabweb1 ~]# setsebool -P ftpd_anon_write=on
             [root@zabweb1 ~]# setsebool -P ftpd_full_access=on
查看布尔值:     [root@zabweb1 ~]# getsebool -a | grep ftp

ftp上传文件:
                ftp>cd share
                   lcd /etc          //切换目录
                   put passwd        //上传文件(需要在服务端修改selinux为宽松模式)
 
                    
查看日志解决问题: rpm -qa | grep -i shoot
               yum list | grep -i shoot
               yum  -y install setroubleshoot* ; reboot
               grep setroubleshoot /var/log/messages | tail -1
                    Oct 30 11:58:14 zabweb1 setroubleshoot: SELinux is preventing /usr/sbin/httpd from name_bind access on the tcp_socket port 8070. For complete SELinux messages run: sealert -l aab50022-a833-4dc8-b84f-36c4722453bd
               [root@zabweb1 ~]# sealert -l aab50022-a833-4dc8-b84f-36c4722453bd 

                semanage [root@room9pc01 student]# rpm -qf /usr/bin/gpg
gnupg2-2.0.22-4.el7.x86_64
port -a -t http_port_t -p tcp 8070
                systemctl restart httpd
                [root@zabweb1 ~]# netstat -untlp | grep :8070
                tcp        0      0 0.0.0.0:8070            0.0.0.0:*               LISTEN      1070/httpd 


#####################################################################################################################################

查看有没有安装GPG软件:[root@room9pc01 student]# rpm -qf /usr/bin/gpg
gnupg2-2.0.22-4.el7.x86_64

gpg数据对称加解密
    非对称加解密
    数字签名

rm -rf ~/.gnupg
root]mv /dev/random  /dev/randomold
root]ln -s /dev/urandom  /dev/random
gpg --gen-key
  
userb]$ ls ~/.gnupg

[userb@room9pc01 ~]$ ls -a ~
.  ..  .bash_logout  .bash_profile  .bashrc  .cache  .config  .gnupg  mimi.txt  .mozilla
[userb@room9pc01 ~]$ cd .gnupg/
[userb@room9pc01 .gnupg]$ ls
gpg.conf           pubring.gpg   random_seed  S.gpg-agent
private-keys-v1.d  pubring.gpg~  secring.gpg  trustdb.gpg    //secring.gpg 私钥     pubring.gpg 公钥   pubring.gpg~ 公钥备份

导出公钥:[userb@room9pc01 .gnupg]$ gpg -a --export > userb.pub
       [userb@room9pc01 .gnupg]$ mv userb.pub /tmp/          //tmp所有的用户都可以访问
             

导入公钥:[usera@room9pc01 ~]$ gpg --import /tmp/userb.pub

使用公钥加密文件:[usera@room9pc01 ~]$ gpg -e -r userb t1.txt
[usera@room9pc01 ~]$ mv t1.txt.gpg /tmp

使用私钥解密:[userb@room9pc01 tmp]$ gpg -d t1.txt.gpg > ~/t2.txt   //~自己的家目录
[userb@room9pc01 tmp]$ cat ~/t2.txt 
aaaa
                                                       
签名:[userb@room9pc01 ~]$ gpg -b mimi.txt
[userb@room9pc01 ~]$ mv mimi.txt mimi.txt.sig  /tmp/

查看签名:[usera@room9pc01 ~]$ gpg --verify /tmp/mimi.txt.sig 
         如果文件被修改,则显示被损坏,root将文件修改回来,则显示完好的签名


####################################################################################################################################

ping:
[root@room9pc01 ~]# nmap -sP 176.209.101.1-254

扫描多个端口:
[root@room9pc01 ~]# nmap -p 8070,22,21 192.168.2.100     //nmap比ping的优势在于,可以ping多台主机

检查操作系统全面分析:
[root@room9pc01 ~]# nmap -A 192.168.2.100


抓取对方ping的命令: tcpdump -i br1 icmp        //br1为网卡

多条指令一起用 and 来连接: tcpdump -i br1 icmp  and host 172.40.52.101

tcpdump -i br1 port 22 and host 172.40.52.101

tcpdump -i br1 portrange 22 and host 172.40.52.101 

tcpdump -A -i eth1 tcp port 21  

抓包过程中建立conf文件:  [root@zabweb1 ~]# tcpdump -A -i eth1 tcp port 21 -w /root/ftp.cap    //客户端要访问ftp服务端

能过滤密码和用户名: [root@zabweb1 ~]# tcpdump -A -r /root/ftp.cap | grep -i pass 
                [root@zabweb1 ~]# tcpdump -A -r /root/ftp.cap | grep -i user

###################################################################################################################################

audit   审查

显示日志文件的行号: [root@audit203 ~]# cat -b /var/log/audit/audit.log


[root@audit203 ~]# auditctl -w /etc/passwd -p wa -k plj_pwd    // -w 定义写进什么文件里,-p 设置权限(rwx a:文件或目录的属性发生变化)  -k 设置名字 


 -w /etc/passwd -p wa -k plj_pwd 
 -w /etc/selinux/ -p wa -k plj_s
 -w /usr/sbin/fdisk -p x -k plj_di


./configure --help

添加 :
 http {  
limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

 server {
  limit_req zone=one burst=5;

 可有效限制访问量



限制他人以head等非法访问
server {
        #autoindex on;
        listen       80;
        if ($request_method !~ ^(GET|POST)$) {          //! 感叹号取反 ,~ 匹配,相当于=  
          return 444;
         }


检测有没有问题 :  /usr/local/nginx/sbin/nginx -t
 
curl -I  http://localhost:8080/test.html 看头部信息
                                                                                      B(eth1 2.10  eth0 4.10
                                                                                      A(eth1 2.11
                                                                                      C(eth0 4.11

####################################################################################################################################


降权处理:
(使用非root启动tomcat服务)
[root@audit203 util]# useradd tomcat

[root@audit203 util]# chown -R tomcat:tomcat /usr/local/tomcat/
[root@audit203 util]# su - -c "/usr/local/tomcat/bin/startup.sh" tomcat

[root@audit203 util]# ps aux | grep -i java     //查看进程的所有者

[root@room9pc01 ~]# diff -u test1.sh test2.sh > x.patch  //记录差异     -u:输出统一内容的头部信息    u:文件
 
[root@room9pc01 demo]# diff -uraN /demo/source1 /demo/source2 > /tmp/y.patch     //给目录打补丁  

[root@room9pc01 demo]# mkdir /demo/{source1,source2} 

检查命令:
[root@room9pc01 demo]# which tree
没有就要安装: rpm -qf /bin/tree
           tree-1.6.0-10.el7.x86_64

打补丁要在对应的目录,并且考虑有没有重复的路径.这个路径对比是root用户所在的路径,与补丁文件里的路径,用pwd来查看,比如说用户root在/demo目录里,补丁文件的路径是--- /demo/source1/find	,也就是说,他们有相同的路径为/ ,以及demo/ ,所以要删除这相同的两个.用 patch -p2 < /root/y.patch 来打补丁
 
用这个来看补丁文件的路径:[root@audit203 demo]# head -5 /root/y.patch

撤销补丁: patch -p2 -RE < /root/y.patch

###################################################################################################################

ssh -X root@192.168.2.10   b  4.10
ssh -X root@192.168.2.11   a
ssh -X root@192.168.4.11   c


查看yum清单:[root@b ~]# yum list | grep -i iptables

[root@b ~]# yum -y install iptables-services.x86_64 

查看状态:[root@b ~]# systemctl status iptables.service

iptables:表 :功能分类
包过滤  filter
地址转换 nat
打标记  mangle
状态跟踪 raw
                                                     
链:数据包传输的方向
进入防火墙的数据包   INPUT
从防火墙出去的数据包  OUTPUT
经过防火墙的数据包  FORWARD
处理路由前的数据包  PREROUTING
处理路由后的数据包  POSTROUTING

iptables命令;管理防火墙服务
]# iptables -t 表名 选项 链名 条件 -j 处理动作

[root@b ~]# iptables -t filter  -nL INPUT --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    REJECT     icmp --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-port-unreachable
2    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
3    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
4    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           
5    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22
6    REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited

[root@b ~]# iptables -t filter  -I INPUT -p icmp  -j REJECT
删除规则:
[root@b ~]# iptables -t filter  -D INPUT 1
[root@b ~]# iptables -t filter  -nL INPUT --line-numbers
Chain INPUT (policy ACCEPT)
num  target     prot opt source               destination         
1    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            state RELATED,ESTABLISHED
2    ACCEPT     icmp --  0.0.0.0/0            0.0.0.0/0           
3    ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0           
4    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            state NEW tcp dpt:22
5    REJECT     all  --  0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited

查看规则:

[root@b ~]# iptables -t nat -L

[root@b ~]# iptables -t raw -L

[root@b ~]# iptables -t mangle -L

指定规则:
[root@b ~]# iptables -L INPUT
[root@b ~]# iptables -t nat -L OUTPUT

清空规则:
[root@b ~]# iptables -t filter -F
[root@b ~]# iptables -t nat -F
[root@b ~]# iptables -t raw -F
[root@b ~]# iptables -t mangle -F 


主机型防火墙:自己保护自己   filter表的INPUT链
网络型防火墙: 架设在2个网络之间  使用filter表的FORWARD链


grant all on db1.* to admin@"%" identified by '123456'


man iptables     //寻找帮助
iptables -h

[root@b ~]# iptables -t filter -A INPUT -p tcp --dport 22 -j ACCEPT    //定制限制规则,协议为tcp的,且为22端口的就可以进
[root@b ~]# iptables -t filter -P INPUT DROP                   
[root@b ~]# iptables-save > /etc/sysconfig/iptables          //永久设置规则,将其写进配置文件

[root@b ~]# iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT
[root@b ~]# iptables -t filter -nL --line-numbers
Chain INPUT (policy DROP)
num  target     prot opt source               destination         
1    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22
2    ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80

Chain FORWARD (policy ACCEPT)
num  target     prot opt source               destination         

Chain OUTPUT (policy ACCEPT)
num  target     prot opt source               destination         


[root@a ~]# curl http://192.168.2.10/test.html
webb


只允许某个网段或主机访问:[root@b ~]# iptables -t filter -A INPUT -p tcp --dport 3306 -s 192.168.4.0/24 -jACCEPT       //网段
                     [root@b ~]# iptables -t filter -A INPUT -p tcp --dport 3306 -s 192.168.4.11 -jACCEPT       //主机



允许ping别人:[root@b ~]# iptables -t filter -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT  

清空全部:[root@b ~]# iptables -t filter -F
[root@b ~]# iptables -t filter -P INPUT ACCEPT
[root@b ~]# iptables-save >  /etc/sysconfig/iptables


[root@b ~]# iptables -t filter -P INPUT ACCEPT

开启路由: [root@a ~]# echo 1 > /proc/sys/net/ipv4/ip_forward  //临时

[root@c ~]# echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf //永久
[root@a ~]# echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf    //永久

添加网关:[root@a ~]# route add default gw 192.168.2.10    //这个是2网段
         [root@c ~]#  route add default gw 192.168.4.10  //这个是4网段

经过防火墙主机的数据包,这里防火墙主机作为路由器了: [root@b ~]# iptables -t filter -A FORWARD -p tcp --dport 80 -j ACCEPT  //dport 目标端口

[root@b ~]# iptables -t filter -A FORWARD -p tcp --sport 80 -j ACCEPT      //sport 源端口

要注意,这些配置都要写入源文件才能永久生效,也就是  iptables-save >  /etc/sysconfig/iptables  

启动防火墙服务:systemctl start iptables.service 
     systemctl enable iptables.service



检查网关:[root@a ~]# route -n

man iptables

寻找模块帮助:[root@b ~]# iptables -t filter -A INPUT -m mac --help


[root@b ~]# iptables -t filter -A FORWARD -m multiport -p tcp --sports 22,80,6379 -j ACCEPT    //-m multiport  多端口匹配
[root@b ~]# iptables -t filter -A FORWARD -m multiport -p tcp --dports 22,80,6379 -j ACCEPT 
[root@b ~]# iptables -t filter -D FORWARD 1    (执行4遍 删除已有的前4条)
[root@b ~]# iptables -t filter -A FORWARD -p icmp -m iprange --src-range 192.168.2.11-192.168.2.20 -j ACCEPT   //-m iprange  匹配ip
[root@b ~]# iptables -t filter -I FORWARD 3 -p icmp -m mac --mac-source 52:54:00:89:13:73 -j DROP    //-m MAC mac地址匹配


删除网关:[root@a ~]# route del default gw 192.168.2.10

检查网关:[root@c ~]# route -n

开启端口转发:[root@b ~]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -p tcp --dport 80 -j SNAT --to-source 192.168.2.10

####################################################################################################################################
项目一:

ssh -X root@192.168.4.11
ssh -X root@192.168.4.22
ssh -X root@192.168.4.77
ssh -X root@192.168.4.30
ssh -X root@192.168.4.33
ssh -X root@192.168.4.44
ssh -X root@192.168.4.55


数据库查看初始登录密码:
grep password  /var/log/mysqld.log


查看用户和它的权限:MySQL中所有使用者的权限是记录在mysql这个数据库的users资料表中
所以你只要先use mysql
再SELECT * FROM users 你可以看到所有的使用者权限
有关db的数据是记录在Db(大小写要注意)这个数据表中
所以只要呼叫出Db的资料 SELECT * FROM Db 就可以看到你要的答案
或者你可以用 SELECT * FROM Db WHERE Db='phplampDB'找出你要的答案 

SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user;

desc mysql.user;  //查看表结构,可通过具体的来查询


配置读写分离的时候. vim  /etc/maxscale.cnf ,里面有关[Read-Only 的项要全部注释掉,eg :#[Read-Only Listener]
#type=listener
#service=Read-Only Service
#protocol=MySQLClient
#port=4008

maxscale服务出错先杀死,再重启: [root@maxscale77 ~]# kill -9 maxscale
起maxscale服务:[root@maxscale77 ~]# maxscale  -f /etc/maxscale.cnf


[root@nfs30 ~]# yum -y install  nfs-utils   rpcbind    //rpcbind 传递数据时用的


安装php-fpm-5.4.16-42.el7.x86_64.rpm: [root@zabbix55 ~]#  yum -y  install  php-fpm-*

ssh -X root@192.168.4.51
ssh -X root@192.168.4.52
ssh -X root@192.168.4.53
ssh -X root@192.168.4.54
ssh -X root@192.168.4.56
ssh -X root@192.168.4.57
ssh -X root@192.168.4.58

ssh -X root@192.168.4.66
ssh -X root@192.168.4.10
ssh -X root@192.168.4.88
ssh -X root@192.168.4.99
ssh -X root@192.168.4.98
查看进程: ps -C redis-server

安装pxc时,首先解压包: tar -xf Percona-XtraDB-Cluster-5.7.25-31.35-r463-el7-x86_64-bundle.tar
然后安装:rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm 
yum -y install percona-xtrabackup-24-2.4.13-1.el7.x86_64.rpm
rpm -ivh qpress-1.1-14.11.x86_64.rpm 
yum -y install Percona-XtraDB-Cluster-*.rpm


修改数据库表结构,加入主键:
mysql> use gamedb
mysql> alter table user add primary key(name);



